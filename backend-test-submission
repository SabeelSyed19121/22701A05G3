const express = require("express");
const bodyParser = require("body-parser");
const { nanoid } = require("nanoid");

const app = express();
const port = 3000;

app.use((req, res, next) => {
  const log = [${new Date().toISOString()}] ${req.method} ${req.url};
  console.log(log);
  next();
});

app.use(bodyParser.json());

let urlDB = {};

app.post("/shorten", (req, res) => {
  const { url, validity, shortcode } = req.body;

  if (!url) {
    return res.status(400).json({ error: "URL is required" });
  }

  let code = shortcode || nanoid(6);
  while (urlDB[code]) {
    code = nanoid(6);
  }

  const validityMinutes = validity || 30;
  const createdAt = new Date();
  const expiry = new Date(createdAt.getTime() + validityMinutes * 60000);

 urlDB[code] = {
    originalUrl: url,
    createdAt,
    expiry,
    clicks: []
  };

  return res.status(201).json({
    shortLink: http://localhost:${port}/${code},
    expiry: expiry.toISOString()
  });
});

app.get("/:code", (req, res) => {
  const { code } = req.params;
  const entry = urlDB[code];

  if (!entry) {
    return res.status(404).json({ error: "Short URL not found" });
  }

  if (new Date() > entry.expiry) {
    return res.status(410).json({ error: "Short URL has expired" });
  }

  entry.clicks.push({
    timestamp: new Date(),
    referrer: req.get("referer") || "direct",
    ip: req.ip
  });

  return res.redirect(entry.originalUrl);
});
app.get("/shorturls/:code", (req, res) => {
  const { code } = req.params;
  const entry = urlDB[code];

  if (!entry) {
    return res.status(404).json({ error: "Short URL not found" });
  }

  res.json({
    originalUrl: entry.originalUrl,
    createdAt: entry.createdAt,
    expiry: entry.expiry,
    totalClicks: entry.clicks.length,
    clickDetails: entry.clicks
  });
});

app.listen(port, () => {
  console.log(URL Shortener service running at http://localhost:${port});
});
